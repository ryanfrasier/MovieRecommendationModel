# -*- coding: utf-8 -*-
"""Movie_Recommendation_Engine.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1m5ltddl2A2rfLJOI8EmD_4lcPZwhVJot
"""

#import the libraries
import pandas as pd
import numpy as np
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.feature_extraction.text import CountVectorizer

#load the data
df=pd.read_csv("/content/movie_data.csv")

#create movie id column
df['Movie_id'] = range(0,1000)
df.head(3)

#retrieve the list of columns that our dataset contains
df.columns

#get a count of number of movies in dataset and number of columns
df.shape

#list of important columns
columns = ['Actors', 'Director', 'Genre', 'Title']

#show the data
df[columns].head()

#check for any missing values in the important columns
df[columns].isnull().values.any()

#create a function to combine the values of the important columns into one string
def get_important_features(data):
  important_features = []
  for i in range(0, data.shape[0]):
    important_features.append(data['Actors'][i]+' '+data['Director'][i]+' '+data['Genre'][i]+' '+data['Title'][i])

  return important_features

print(get_important_features)

#create a column to hold the combined strings
df['important_features'] = get_important_features(df)

#show the data
df.head()

#convert the text to a matrix of token counts
#tokenization of the data of text into a matrix of counts; why do we do this because ML models are not able to intrepret natural text
cm = CountVectorizer().fit_transform(df['important_features'])

#get the cosine similarity matrix from the count matrix
cs = cosine_similarity(cm)
#print the cosine similarity matrix
print(cs)

#get the shape of the cosine similarity matrix
cs.shape

#get the title of the movie that the user likes
title = 'Deadpool'

#find the movies id
movie_id = df[df.Title == title]['Movie_id'].values[0]

#create a list of enums for the similarity score
scores = list(enumerate(cs[movie_id]))

#sort the list using the lambda function to index through the matrix
sorted_scores = sorted(scores, key = lambda x:x[1], reverse = True)
sorted_scores = sorted_scores[1:]

#print the sorted scores
print(sorted_scores)

#create a loop to print the first 7 similar movies
j = 0
print('The 7 Most recommended movies to watch, similar to', title, 'are:\n')

for item in sorted_scores:
  movie_title = df[df.Movie_id == item[0]]['Title'].values[0]
  print(j+1, movie_title)
  j = j+1
  if j>6:
    break